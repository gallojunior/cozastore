// <auto-generated />
using System;
using CozaStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CozaStore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CozaStore.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Foto")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("varchar(600)");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("CozaStore.Models.Carrinho", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Carrinho");
                });

            modelBuilder.Entity("CozaStore.Models.CarrinhoProduto", b =>
                {
                    b.Property<int>("CarrinhoId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("ProdutoEstoqueId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("PrecoDesconto")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("QtdeEstoque")
                        .HasColumnType("int");

                    b.HasKey("CarrinhoId", "ProdutoEstoqueId");

                    b.HasIndex("ProdutoEstoqueId");

                    b.ToTable("CarrinhoProduto");
                });

            modelBuilder.Entity("CozaStore.Models.Categoria", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("Banner")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte?>("CategoriaPaiId")
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("Filtrar")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Foto")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaPaiId");

                    b.ToTable("Categoria");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Banner = true,
                            Filtrar = true,
                            Foto = "images/categorias/1.jpg",
                            Nome = "Feminina"
                        },
                        new
                        {
                            Id = (byte)2,
                            Banner = true,
                            Filtrar = true,
                            Foto = "images/categorias/2.jpg",
                            Nome = "Masculina"
                        },
                        new
                        {
                            Id = (byte)3,
                            Banner = true,
                            Filtrar = false,
                            Foto = "images/categorias/3.jpg",
                            Nome = "Acessórios"
                        },
                        new
                        {
                            Id = (byte)4,
                            Banner = false,
                            CategoriaPaiId = (byte)3,
                            Filtrar = true,
                            Foto = "",
                            Nome = "Bolsas"
                        },
                        new
                        {
                            Id = (byte)5,
                            Banner = false,
                            CategoriaPaiId = (byte)3,
                            Filtrar = true,
                            Foto = "",
                            Nome = "Calçados"
                        },
                        new
                        {
                            Id = (byte)6,
                            Banner = false,
                            CategoriaPaiId = (byte)3,
                            Filtrar = true,
                            Foto = "",
                            Nome = "Relógios"
                        });
                });

            modelBuilder.Entity("CozaStore.Models.Cor", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("CodigoHexa")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Cor");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CodigoHexa = "#222",
                            Nome = "Preto"
                        },
                        new
                        {
                            Id = (byte)2,
                            CodigoHexa = "#4272d7",
                            Nome = "Azul"
                        },
                        new
                        {
                            Id = (byte)3,
                            CodigoHexa = "#b3b3b3",
                            Nome = "Cinza"
                        },
                        new
                        {
                            Id = (byte)4,
                            CodigoHexa = "#00ad5f",
                            Nome = "Verde"
                        },
                        new
                        {
                            Id = (byte)5,
                            CodigoHexa = "#fa4251",
                            Nome = "Vermelho"
                        },
                        new
                        {
                            Id = (byte)6,
                            CodigoHexa = "#aaa",
                            Nome = "Branco"
                        });
                });

            modelBuilder.Entity("CozaStore.Models.ListaDesejo", b =>
                {
                    b.Property<int>("ProdutoId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ProdutoId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ListaDesejo");
                });

            modelBuilder.Entity("CozaStore.Models.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescricaoCompleta")
                        .HasMaxLength(8000)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("DescricaoResumida")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("Destaque")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Dimensao")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Material")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<decimal>("Peso")
                        .HasColumnType("decimal(6,3)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("PrecoDesconto")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("SKU")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Produto");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DescricaoCompleta = "Aenean sit amet gravida nisi. Nam fermentum est felis, quis feugiat nunc fringilla sit amet. Ut in blandit ipsum. Quisque luctus dui at ante aliquet, in hendrerit lectus interdum. Morbi elementum sapien rhoncus pretium maximus. Nulla lectus enim, cursus et elementum sed, sodales vitae eros. Ut ex quam, porta consequat interdum in, faucibus eu velit. Quisque rhoncus ex ac libero varius molestie. Aenean tempor sit amet orci nec iaculis. Cras sit amet nulla libero. Curabitur dignissim, nunc nec laoreet consequat, purus nunc porta lacus, vel efficitur tellus augue in ipsum. Cras in arcu sed metus rutrum iaculis. Nulla non tempor erat. Duis in egestas nunc.",
                            DescricaoResumida = "Nulla eget sem vitae eros pharetra viverra. Nam vitae luctus ligula. Mauris consequat ornare feugiat",
                            Destaque = true,
                            Nome = "Camiseta Esprit Ruffle",
                            Peso = 0m,
                            Preco = 20.64m,
                            PrecoDesconto = 20.64m,
                            SKU = "CAM-01"
                        });
                });

            modelBuilder.Entity("CozaStore.Models.ProdutoAvaliacao", b =>
                {
                    b.Property<int>("ProdutoId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("AvaliacaoData")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("AvaliacaoTexto")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<byte?>("ProdutoNota")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("ProdutoId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ProdutoAvaliacao");
                });

            modelBuilder.Entity("CozaStore.Models.ProdutoCategoria", b =>
                {
                    b.Property<int>("ProdutoId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<byte>("CategoriaId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(2);

                    b.HasKey("ProdutoId", "CategoriaId");

                    b.HasIndex("CategoriaId");

                    b.ToTable("ProdutoCategoria");

                    b.HasData(
                        new
                        {
                            ProdutoId = 1,
                            CategoriaId = (byte)1
                        });
                });

            modelBuilder.Entity("CozaStore.Models.ProdutoEstoque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte>("CorId")
                        .HasColumnType("tinyint unsigned");

                    b.Property<decimal?>("Preco")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal?>("PrecoDesconto")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int");

                    b.Property<int>("QtdeEstoque")
                        .HasColumnType("int");

                    b.Property<byte>("TamanhoId")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("CorId");

                    b.HasIndex("ProdutoId");

                    b.HasIndex("TamanhoId");

                    b.ToTable("ProdutoEstoque");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorId = (byte)6,
                            ProdutoId = 1,
                            QtdeEstoque = 10,
                            TamanhoId = (byte)1
                        },
                        new
                        {
                            Id = 2,
                            CorId = (byte)6,
                            ProdutoId = 1,
                            QtdeEstoque = 10,
                            TamanhoId = (byte)2
                        },
                        new
                        {
                            Id = 3,
                            CorId = (byte)6,
                            ProdutoId = 1,
                            QtdeEstoque = 10,
                            TamanhoId = (byte)3
                        });
                });

            modelBuilder.Entity("CozaStore.Models.ProdutoFoto", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("ArquivoFoto")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("Destaque")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id", "ProdutoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ProdutoFoto");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProdutoId = 1,
                            ArquivoFoto = "/images/produtos/1/1.jpg",
                            Destaque = true
                        });
                });

            modelBuilder.Entity("CozaStore.Models.ProdutoTag", b =>
                {
                    b.Property<int>("ProdutoId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<byte>("TagId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(2);

                    b.HasKey("ProdutoId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProdutoTag");

                    b.HasData(
                        new
                        {
                            ProdutoId = 1,
                            TagId = (byte)1
                        });
                });

            modelBuilder.Entity("CozaStore.Models.Tag", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Tag");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Nome = "Fashion"
                        },
                        new
                        {
                            Id = (byte)2,
                            Nome = "LifeStyle"
                        },
                        new
                        {
                            Id = (byte)3,
                            Nome = "Denim"
                        },
                        new
                        {
                            Id = (byte)4,
                            Nome = "StreetStyle"
                        },
                        new
                        {
                            Id = (byte)5,
                            Nome = "Crafts"
                        });
                });

            modelBuilder.Entity("CozaStore.Models.Tamanho", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.ToTable("Tamanho");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Nome = "Pequeno",
                            Sigla = "P"
                        },
                        new
                        {
                            Id = (byte)2,
                            Nome = "Médio",
                            Sigla = "M"
                        },
                        new
                        {
                            Id = (byte)3,
                            Nome = "Grande",
                            Sigla = "G"
                        },
                        new
                        {
                            Id = (byte)4,
                            Nome = "Extra Grande",
                            Sigla = "GG"
                        });
                });

            modelBuilder.Entity("CozaStore.Models.Usuario", b =>
                {
                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Foto")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            UsuarioId = "2e17229d-6dc6-4080-8e3a-8c99b7a28987",
                            DataNascimento = new DateTime(1981, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "/img/users/avatar.png",
                            Nome = "José Antonio Gallo Junior"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "64dc0628-70e5-4aba-a6e7-adbcb5e938d4",
                            ConcurrencyStamp = "46b49255-6f9b-4733-83f7-c7286867b098",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "58c318a3-bffb-4fd5-af32-ea4d1da6eace",
                            ConcurrencyStamp = "ece47271-38ae-417d-9131-3fa745d398b9",
                            Name = "Funcionário",
                            NormalizedName = "FUNCIONARIO"
                        },
                        new
                        {
                            Id = "52c8eae2-21d3-4590-9c6a-24d06eac0f17",
                            ConcurrencyStamp = "52d41702-5b1f-4f4e-8650-a6f9eda11c8d",
                            Name = "Cliente",
                            NormalizedName = "CLIENTE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2e17229d-6dc6-4080-8e3a-8c99b7a28987",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "86d17fa1-ab23-4601-bb52-2fda2febd6b1",
                            Email = "gallojunior@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GALLOJUNIOR@GMAIL.COM",
                            NormalizedUserName = "GALLOJUNIOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEEk7XI4TevtPwh/ETZM/AoQcR6t7p3mCHPi58Y0LXYGcXSeiLosQIeWgy45Iv9Txdw==",
                            PhoneNumber = "14912345678",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "cf1362cd-e733-4379-bb76-d9cbdbaf2790",
                            TwoFactorEnabled = false,
                            UserName = "GalloJunior"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2e17229d-6dc6-4080-8e3a-8c99b7a28987",
                            RoleId = "64dc0628-70e5-4aba-a6e7-adbcb5e938d4"
                        },
                        new
                        {
                            UserId = "2e17229d-6dc6-4080-8e3a-8c99b7a28987",
                            RoleId = "58c318a3-bffb-4fd5-af32-ea4d1da6eace"
                        },
                        new
                        {
                            UserId = "2e17229d-6dc6-4080-8e3a-8c99b7a28987",
                            RoleId = "52c8eae2-21d3-4590-9c6a-24d06eac0f17"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CozaStore.Models.Blog", b =>
                {
                    b.HasOne("CozaStore.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CozaStore.Models.Carrinho", b =>
                {
                    b.HasOne("CozaStore.Models.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CozaStore.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CozaStore.Models.CarrinhoProduto", b =>
                {
                    b.HasOne("CozaStore.Models.Carrinho", "Carrinho")
                        .WithMany("Produtos")
                        .HasForeignKey("CarrinhoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CozaStore.Models.ProdutoEstoque", "ProdutoEstoque")
                        .WithMany("Carrinhos")
                        .HasForeignKey("ProdutoEstoqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrinho");

                    b.Navigation("ProdutoEstoque");
                });

            modelBuilder.Entity("CozaStore.Models.Categoria", b =>
                {
                    b.HasOne("CozaStore.Models.Categoria", "CategoriaPai")
                        .WithMany()
                        .HasForeignKey("CategoriaPaiId");

                    b.Navigation("CategoriaPai");
                });

            modelBuilder.Entity("CozaStore.Models.ListaDesejo", b =>
                {
                    b.HasOne("CozaStore.Models.Produto", "Produto")
                        .WithMany("ListaDesejos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CozaStore.Models.Usuario", "Usuario")
                        .WithMany("ListaDesejos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CozaStore.Models.ProdutoAvaliacao", b =>
                {
                    b.HasOne("CozaStore.Models.Produto", "Produto")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CozaStore.Models.Usuario", "Usuario")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CozaStore.Models.ProdutoCategoria", b =>
                {
                    b.HasOne("CozaStore.Models.Categoria", "Categoria")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CozaStore.Models.Produto", "Produto")
                        .WithMany("Categorias")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("CozaStore.Models.ProdutoEstoque", b =>
                {
                    b.HasOne("CozaStore.Models.Cor", "Cor")
                        .WithMany("Estoque")
                        .HasForeignKey("CorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CozaStore.Models.Produto", "Produto")
                        .WithMany("Estoque")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CozaStore.Models.Tamanho", "Tamanho")
                        .WithMany("Estoque")
                        .HasForeignKey("TamanhoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cor");

                    b.Navigation("Produto");

                    b.Navigation("Tamanho");
                });

            modelBuilder.Entity("CozaStore.Models.ProdutoFoto", b =>
                {
                    b.HasOne("CozaStore.Models.Produto", "Produto")
                        .WithMany("Fotos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("CozaStore.Models.ProdutoTag", b =>
                {
                    b.HasOne("CozaStore.Models.Produto", "Produto")
                        .WithMany("Tags")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CozaStore.Models.Tag", "Tag")
                        .WithMany("Produtos")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CozaStore.Models.Usuario", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AccountUser")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CozaStore.Models.Carrinho", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("CozaStore.Models.Categoria", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("CozaStore.Models.Cor", b =>
                {
                    b.Navigation("Estoque");
                });

            modelBuilder.Entity("CozaStore.Models.Produto", b =>
                {
                    b.Navigation("Avaliacoes");

                    b.Navigation("Categorias");

                    b.Navigation("Estoque");

                    b.Navigation("Fotos");

                    b.Navigation("ListaDesejos");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("CozaStore.Models.ProdutoEstoque", b =>
                {
                    b.Navigation("Carrinhos");
                });

            modelBuilder.Entity("CozaStore.Models.Tag", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("CozaStore.Models.Tamanho", b =>
                {
                    b.Navigation("Estoque");
                });

            modelBuilder.Entity("CozaStore.Models.Usuario", b =>
                {
                    b.Navigation("Avaliacoes");

                    b.Navigation("ListaDesejos");
                });
#pragma warning restore 612, 618
        }
    }
}
